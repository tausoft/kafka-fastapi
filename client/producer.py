from aiokafka import AIOKafkaProducer
import asyncio
import json
import os
from random import randint


# env variables
KAFKA_TOPIC = os.getenv('KAFKA_TOPIC', 'topic_solver')
KAFKA_BOOTSTRAP_SERVERS = os.getenv('KAFKA_BOOTSTRAP_SERVERS', 'localhost:9092')

# global variables
loop = asyncio.get_event_loop()

user_input = input("Please enter number of messages to be generated by producer: ")
user_input_trigger = True

while user_input_trigger:
    try:
        val = int(user_input)
        user_input_trigger = False
    except ValueError:
        user_input = input("Input must be number! Please enter number of messages to be generated by producer: ")

async def send_one():
    producer = AIOKafkaProducer(loop=loop, bootstrap_servers=KAFKA_BOOTSTRAP_SERVERS)
    # get cluster layout and initial topic/partition leadership information
    await producer.start()
    try:
        for x in range(int(user_input)):
            # produce message
            msg_id = f'{randint(1, 10000)}'
            value = {'message_id': str(msg_id), 'text': 'some text', 'state': str(randint(1, 100))}
            print(f'Sending message with value: {value}')
            value_json = json.dumps(value).encode('utf-8')
            await producer.send_and_wait(KAFKA_TOPIC, value_json)
    finally:
        # wait for all pending messages to be delivered or expire.
        await producer.stop()

# send message
loop.run_until_complete(send_one())
